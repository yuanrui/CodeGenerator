<#
//------------------------------------------------------------------------------
// <copyright file="DataProvider.tt">
//    Copyright (c) 2021, https://github.com/yuanrui All rights reserved.
// </copyright>
// <author>Yuan Rui</author>
// <date>2021-12-15 18:00:00</date>
//------------------------------------------------------------------------------
#>
<#@ template language="C#" hostSpecific="true" debug="false" #>
<#@ output encoding="utf-8" extension=".cs" #>
<#@ include file="../TemplateFileManager.ttinclude" #>
<#@ include file="../MySqlTypeConverter.ttinclude" #>
<# 
	CustomHost host = (CustomHost)(Host);
	Table table = host.Table;
    var entClassName = table.DisplayName + "Entity";
    var pkCol = table.PrimaryKeyColumns.First();
    var pkTypeName = pkCol.TypeName;
    var index = 0;
    var manager = Manager.Create(host, GenerationEnvironment);
	manager.StartNewFile(table.DisplayName + "SqlProviderBase.generated.cs", host.GetValue("OutputPath").ToString() + "\\MySQL\\Banana.DataAccess\\Generated");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>SqlProviderBase.generated.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
// <auto-generated>
//    This code was generated by AutoCode.exe
//    Template Version:20231225
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banana.DataAccess.Base
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Linq;
    using System.Text;
    using Banana.Entity;
    using MySqlConnector;

    /// <summary>
	/// <#= String.Format("Data access base class for {0}Entity", table.DisplayName) #>
    /// </summary>
	public abstract partial class <#= table.DisplayName #>SqlProviderBase : DataProviderBase<<#= entClassName #>>
    {
        #region SQL

        public virtual String TableName
        { 
            get 
            {
                return "<#= table.Name #>";
            }
        }

        protected const String Exists_<#= table.DisplayName #>_Sql = @"SELECT COUNT(*) FROM <#= table.Name #> 
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=@{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const String Get_<#= table.DisplayName #>_Sql = @"SELECT * FROM <#= table.Name #> 
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=@{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const String Find_<#= table.DisplayName #>_Sql = @"SELECT * FROM <#= table.Name #> WHERE 1=1 ";
        
        protected const String Insert_<#= table.DisplayName #>_Sql = @"
INSERT INTO <#= table.Name #>
(<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => "@" + m.Name).Aggregate((a, b) => a + ", " + b) #>)";

        protected const String Update_<#= table.DisplayName #>_Sql = @"
UPDATE <#= table.Name #>
SET <#= table.Columns.Select(m => String.Format("{0}=@{0}", m.Name)).Aggregate((a, b) => a + ", " + b) #>
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=@{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        protected const String Save_<#= table.DisplayName #>_Sql = @"
INSERT INTO <#= table.Name #>
(<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>)
VALUES
(<#= table.Columns.Select(m => "@" + m.Name).Aggregate((a, b) => a + ", " + b) #>)
ON DUPLICATE KEY UPDATE
<#= table.NonPrimaryKeyColumns.Select(m => String.Format("{0}=@{0}", m.Name)).Aggregate((a, b) => a + ", " + b) #>";
    
        protected const String Delete_<#= table.DisplayName #>_Sql = @"
DELETE FROM <#= table.Name #>
WHERE <#= table.PrimaryKeyColumns.Select(m => String.Format("{0}=@{0}", m.Name)).Aggregate((a, b) => a + " AND " + b) #>";

        #endregion

        #region Constructor

        public <#= table.DisplayName #>SqlProviderBase() : base()
        {
        }

        public <#= table.DisplayName #>SqlProviderBase(String connectionName) : base(connectionName)
        {
        }

        #endregion

        #region CRUD

        public virtual Boolean Exists(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            using(var cmd = DatabaseObject.GetSqlStringCommand(Exists_<#= table.DisplayName #>_Sql))
            {
<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
                cmd.Parameters.Add(new MySqlParameter("<#= col.PascalCase #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = <#= col.Name #>, Direction = ParameterDirection.Input });
<#
            }
#>
                var result = DataContextObject.ExecuteScalar(cmd);
            
                return Convert.ToInt32(result) > 0;
            }
        }

        public virtual <#= entClassName #> Get(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            <#= entClassName #> result = null;
            using(var cmd = DatabaseObject.GetSqlStringCommand(Get_<#= table.DisplayName #>_Sql))
            {           
<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
                cmd.Parameters.Add(new MySqlParameter("<#= col.Name #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = <#= col.Name #>, Direction = ParameterDirection.Input });
<#
            }
#>
                using(var reader = DataContextObject.ExecuteReader(cmd))
                {
                    if(reader.Read())
                    {
                        result = Fill(reader);
                    }
                }
            
                return result;
            }
        }

        public virtual List<<#= entClassName #>> FindAll(String whereClause)
        {
            var result = new List<<#= entClassName #>>();
            var sql = Find_<#= table.DisplayName #>_Sql + whereClause;
            using(var cmd = DatabaseObject.GetSqlStringCommand(sql))
            {
                using(var reader = DataContextObject.ExecuteReader(cmd))
                {
                    while(reader.Read())
                    {
                        var ent = Fill(reader);
                        result.Add(ent);
                    }
                }

                return result;
            }
        }

        public virtual Int32 Add(<#= entClassName #> entity)
        {
<#
            if(table.PrimaryKeyIsNumber)
            {
#>
            var isAutoGetNewId = entity.<#= pkCol.PascalCase #> == default(<#= pkTypeName #>);
            using(var cmd = DatabaseObject.GetSqlStringCommand(Insert_<#= table.DisplayName #>_Sql) as MySqlCommand)
            {
                var pkParam = new MySqlParameter("<#= pkCol.Name #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(pkCol.RawType).ToString() #>) { Value = entity.<#= pkCol.PascalCase #>, Direction = ParameterDirection.Input };
                cmd.Parameters.Add(pkParam);
                var nonKeyParams = BuildParametersForNonKey(entity);
                cmd.Parameters.AddRange(nonKeyParams);

                var execResult = DataContextObject.ExecuteNonQuery(cmd);
                if(isAutoGetNewId && cmd.LastInsertedId > 0)
                {
                    entity.<#= pkCol.PascalCase #> = (<#= pkTypeName #>)cmd.LastInsertedId;
                }

                return execResult;
            }
<#
            }
            else
            {
#>
            var @parameters = BuildParameters(entity);

            return Add(@parameters);
<#
            }
#>
        }

        public virtual Int32 Add(DbParameter[] @parameters)
        {
            using(var cmd = DatabaseObject.GetSqlStringCommand(Insert_<#= table.DisplayName #>_Sql) as MySqlCommand)
            {            
                cmd.Parameters.AddRange(@parameters);

                return DataContextObject.ExecuteNonQuery(cmd);
            }
        }

        public virtual Int32 Add(IEnumerable<<#= entClassName #>> list)
        {
            if(list == null || !list.Any())
            {
                return 0;
            }
            
            const string InsertIntoClause = "INSERT INTO <#= table.Name #> (<#= table.Columns.Select(m => m.Name).Aggregate((a, b) => a + ", " + b) #>) VALUES ";
            var valueClauses = new List<string>(list.Count());
            var index = 0;
            foreach(var entity in list)
            {
                var clause = $"(<#= table.Columns.Select(m => "@" + m.Name + "_{index}").Aggregate((a, b) => a + ", " + b) #>)";
                valueClauses.Add(clause);
                index++;
            }
            var sql = InsertIntoClause + string.Join(",", valueClauses) + ";";
            using(var cmd = DatabaseObject.GetSqlStringCommand(sql) as MySqlCommand)
            {
                var @parameters = BuildParameters(list);
                cmd.Parameters.AddRange(@parameters);

                return DataContextObject.ExecuteNonQuery(cmd);
            }
        }

        public virtual Int32 Update(<#= entClassName #> entity)
        {            
            var @parameters = BuildParameters(entity);

            return Update(@parameters);
        }
        
        public virtual Int32 Update(DbParameter[] @parameters)
        {
            using(var cmd = DatabaseObject.GetSqlStringCommand(Update_<#= table.DisplayName #>_Sql) as MySqlCommand)
            {
                cmd.Parameters.AddRange(@parameters);

                return DataContextObject.ExecuteNonQuery(cmd);
            }
        }

        public virtual Int32 Save(<#= entClassName #> entity)
        {
<#
            if(table.PrimaryKeyIsNumber)
            {
#>
            if(entity.<#= pkCol.PascalCase #> == default(<#= pkCol.TypeName #>))
            {
                return Add(entity);
            }
<#            
            }
#>            
            var @parameters = BuildParameters(entity);
            
            return Save(@parameters);
        }
        
        public virtual Int32 Save(DbParameter[] @parameters)
        {
            using(var cmd = DatabaseObject.GetSqlStringCommand(Save_<#= table.DisplayName #>_Sql) as MySqlCommand)
            {
                cmd.Parameters.AddRange(@parameters);

                return DataContextObject.ExecuteNonQuery(cmd);
            }
        }

        public virtual Int32 Delete(<#= entClassName #> entity)
        {
            var @parameters = BuildParametersForKey(entity);

            return Delete(@parameters);
        }

        public virtual Int32 Delete(<#= table.PrimaryKeyColumns.Select(m => String.Format("{0} {1}", m.TypeName, m.Name)).Aggregate((a, b) => a + ", " + b) #>)
        {
            using(var cmd = DatabaseObject.GetSqlStringCommand(Delete_<#= table.DisplayName #>_Sql))
            {
<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
                cmd.Parameters.Add(new MySqlParameter("<#= col.Name #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = <#= col.Name #>, Direction = ParameterDirection.Input });
<#
            }
#>

                return DataContextObject.ExecuteNonQuery(cmd);
            }
        }
        
        public virtual Int32 Delete(DbParameter[] @parameters)
        {
            using(var cmd = DatabaseObject.GetSqlStringCommand(Delete_<#= table.DisplayName #>_Sql) as MySqlCommand)
            {
                cmd.Parameters.AddRange(@parameters);

                return DataContextObject.ExecuteNonQuery(cmd);
            }
        }

        #region Build Parameters

        public virtual DbParameter[] BuildParameters(<#= entClassName #> entity)
        {
            if (entity == null)
            {
                return null;
            }

            var @paramList = new MySqlParameter[<#= table.Columns.Count #>];
<#
            for (int i = 0; i < table.Columns.Count; i++)
            {
                var col = table.Columns[i];
                var paraDirection = col.IsPrimaryKey ? "ParameterDirection.Input" : "ParameterDirection.Input";
#>
            @paramList[<#= i #>] = new MySqlParameter("<#= col.Name #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = entity.<#= col.PascalCase #>, Direction = <#= paraDirection #> };
<#
            }
#>

            return @paramList;
        }
        
        public virtual DbParameter[] BuildParameters(IEnumerable<<#= entClassName #>> list)
        {
            if (list == null || !list.Any())
            {
                return null;
            }

            var @paramList = new List<MySqlParameter>(list.Count() * <#= table.Columns.Count #>);
            var index = 0;
            foreach(var entity in list)
            {
<#
            foreach(var col in table.Columns)
            {
                var paraDirection = col.IsPrimaryKey ? "ParameterDirection.Input" : "ParameterDirection.Input";
#>
                @paramList.Add(new MySqlParameter($"<#= col.Name #>_{index}", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = entity.<#= col.PascalCase #>, Direction = <#= paraDirection #> });
<#
            }
#>
                index++;
            }

            return @paramList.ToArray();
        }

        public virtual DbParameter[] BuildParametersForKey(<#= entClassName #> entity)
        {
            var @paramList = new MySqlParameter[<#= table.PrimaryKeyColumns.Count #>];
<#
            index = 0;
            foreach(var col in table.PrimaryKeyColumns)
            {                
#>
            @paramList[<#= index++ #>] = new MySqlParameter("<#= col.Name #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = entity.<#= col.PascalCase #>, Direction = ParameterDirection.Input };
<#
            }
#>
            return @paramList;
        }

        public virtual DbParameter[] BuildParametersForKey(IEnumerable<<#= entClassName #>> list)
        {
            if (list == null || !list.Any())
            {
                return null;
            }

            var @paramList = new List<MySqlParameter>(list.Count() * <#= table.PrimaryKeyColumns.Count #>);
            var index = 0;
            foreach(var entity in list)
            {
<#
            foreach(var col in table.PrimaryKeyColumns)
            {
#>
                @paramList.Add(new MySqlParameter($"<#= col.Name #>_{index}", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = entity.<#= col.PascalCase #>, Direction = ParameterDirection.Input });
<#
            }
#>
                index++;
            }

            return @paramList.ToArray();
        }

        public virtual DbParameter[] BuildParametersForNonKey(<#= entClassName #> entity)
        {
            var @paramList = new MySqlParameter[<#= table.NonPrimaryKeyColumns.Count #>];
<#
            index = 0;
            foreach(var col in table.NonPrimaryKeyColumns)
            {
#>
            @paramList[<#= index++ #>] = new MySqlParameter("<#= col.Name #>", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = entity.<#= col.PascalCase #>, Direction = ParameterDirection.Input };
<#
            }
#>

            return @paramList;
        }

        public virtual DbParameter[] BuildParametersForNonKey(IEnumerable<<#= entClassName #>> list)
        {
            if (list == null || !list.Any())
            {
                return null;
            }

            var @paramList = new List<MySqlParameter>(list.Count() * <#= table.NonPrimaryKeyColumns.Count #>);
            var index = 0;
            foreach(var entity in list)
            {
<#
            foreach(var col in table.NonPrimaryKeyColumns)
            {
#>
                @paramList.Add(new MySqlParameter($"<#= col.Name #>_{index}", MySqlDbType.<#= MySqlTypeConverter.AsMySqlDbType(col.RawType).ToString() #>) { Value = entity.<#= col.PascalCase #>, Direction = ParameterDirection.Input });
<#
            }
#>
                index++;
            }

            return @paramList.ToArray();
        }
        

        #endregion

        #endregion

        #region Fill Data

        public static <#= entClassName #> Fill(IDataReader reader)
        {
            var ent = new <#= entClassName #>();

<#
            for(var i = 0; i < table.Columns.Count; i ++)
            {
                var col = table.Columns[i];
#>
            <#= MySqlTypeConverter.GetFillNameExpression(col, "ent", i, "reader", String.Empty) #>
<#
            }
#>

            return ent;
        }
        
        public static <#= entClassName #> Fill(IDataReader reader, Int32 start,out Int32 length)
        {
            var ent = new <#= entClassName #>();

            length = <#= table.Columns.Count #>;
<#
            for(var i = 0; i < table.Columns.Count; i ++)
            {
                var col = table.Columns[i];
#>
            <#= MySqlTypeConverter.GetFillIndexExpression(col, "ent", i, "reader", "start + ") #>
<#
            }
#>

            return ent;
        }

        #endregion
	}
}
<# 
	manager.EndBlock(); 

    manager.StartNewFile(table.DisplayName + "SqlProvider.cs", host.GetValue("OutputPath").ToString()+ "\\MySQL");
#>
//------------------------------------------------------------------------------
// <copyright file="<#= table.DisplayName #>SqlProvider.cs">
//    Copyright (c) <#= DateTime.Now.ToString("yyyy") #>, All rights reserved.
// </copyright>
// <author><#= Environment.UserName #></author>
// <date><#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #></date>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using Banana.DataAccess.Base;
using Banana.Entity;
using MySqlConnector;

namespace Banana.DataAccess
{
    /// <summary>
    /// Data access for <#= entClassName #>
    /// <see cref="<#= entClassName #>"/>
    /// </summary>
    public partial class <#= table.DisplayName #>SqlProvider : <#= table.DisplayName #>SqlProviderBase
    {
        #region Constructor

        public <#= table.DisplayName #>SqlProvider() : base()
        {
        }

        public <#= table.DisplayName #>SqlProvider(String connectionName) : base(connectionName)
        {
        }

        #endregion
    }
}
<#
    manager.EndBlock(); 
	manager.Process(true);
#>